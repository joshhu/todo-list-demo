/**
 * 任務管理器組件
 * 負責任務的創建、顯示、編輯和刪除等 UI 操作
 */

import taskService from '../services/TaskService.js';
import { EVENT_TYPES, APP_CONFIG, ERROR_MESSAGES, SUCCESS_MESSAGES } from '../config/settings.js';
import { dateUtils, stringUtils, domUtils, eventUtils, performanceUtils } from '../modules/utils.js';

/**
 * 任務管理器類別
 */
class TaskManager {
    /**
     * 建構函數
     */
    constructor(container) {
        this.container = container;
        this.currentFilter = 'all';
        this.editingTaskId = null;
        this.tasks = [];
        this.isLoading = false;
        this.searchTerm = '';
        this.sortBy = 'createdAt';
        this.sortOrder = 'desc';

        // 繫結方法
        this.handleTaskCreate = this.handleTaskCreate.bind(this);
        this.handleTaskUpdate = this.handleTaskUpdate.bind(this);
        this.handleTaskDelete = this.handleTaskDelete.bind(this);
        this.handleTaskToggle = this.handleTaskToggle.bind(this);
        this.handleFilterChange = this.handleFilterChange.bind(this);
        this.handleSearch = this.handleSearch.bind(this);
        this.handleSort = this.handleSort.bind(this);

        this.initialize();
    }

    /**
     * 初始化任務管理器
     */
    async initialize() {
        try {
            // 初始化服務
            await taskService.initialize();

            // 渲染 UI
            this.render();

            // 繫結事件
            this.bindEvents();

            // 監聽服務事件
            this.bindServiceEvents();

            // 載入任務
            await this.loadTasks();

            console.log('TaskManager 初始化完成');
        } catch (error) {
            console.error('TaskManager 初始化失敗:', error);
            this.showError('初始化失敗', error.message);
        }
    }

    /**
     * 渲染主要 UI 結構 - 使用安全的 DOM 方法
     */
    render() {
        // 清空容器
        this.container.textContent = '';

        const taskManager = domUtils.createElement('div', { className: 'task-manager' });

        // 任務輸入區域
        taskManager.appendChild(this.createInputSection());

        // 任務統計
        taskManager.appendChild(this.createStatsSection());

        // 任務控制區域
        taskManager.appendChild(this.createControlsSection());

        // 任務列表
        taskManager.appendChild(this.createListSection());

        // 通知容器
        taskManager.appendChild(this.createNotificationContainer());

        this.container.appendChild(taskManager);
    }

    /**
     * 創建輸入區域
     */
    createInputSection() {
        const section = domUtils.createElement('section', { className: 'task-input-section' });

        const title = domUtils.createElement('h2');
        title.textContent = '新增任務';
        section.appendChild(title);

        const form = domUtils.createElement('form', {
            id: 'task-form',
            className: 'task-form'
        });

        // 標題輸入
        const titleGroup = domUtils.createElement('div', { className: 'form-group' });
        const titleInput = domUtils.createElement('input', {
            type: 'text',
            id: 'task-title',
            className: 'task-input',
            placeholder: '輸入任務標題...',
            maxLength: '200',
            required: '',
            'aria-label': '任務標題'
        });
        titleGroup.appendChild(titleInput);
        form.appendChild(titleGroup);

        // 描述和其他資料行
        const formRow = domUtils.createElement('div', { className: 'form-row' });

        // 描述
        const descGroup = domUtils.createElement('div', { className: 'form-group' });
        const descTextarea = domUtils.createElement('textarea', {
            id: 'task-description',
            className: 'task-textarea',
            placeholder: '輸入任務描述（選填）...',
            rows: '3',
            'aria-label': '任務描述'
        });
        descGroup.appendChild(descTextarea);
        formRow.appendChild(descGroup);

        // 優先級
        const priorityGroup = domUtils.createElement('div', { className: 'form-group' });
        const prioritySelect = domUtils.createElement('select', {
            id: 'task-priority',
            className: 'task-select',
            'aria-label': '優先級'
        });

        const priorities = [
            { value: 'low', text: '低優先級' },
            { value: 'medium', text: '中優先級' },
            { value: 'high', text: '高優先級' }
        ];

        priorities.forEach(p => {
            const option = domUtils.createElement('option', { value: p.value });
            if (p.value === 'medium') option.selected = '';
            option.textContent = p.text;
            prioritySelect.appendChild(option);
        });
        priorityGroup.appendChild(prioritySelect);
        formRow.appendChild(priorityGroup);

        // 截止日期
        const dateGroup = domUtils.createElement('div', { className: 'form-group' });
        const dateInput = domUtils.createElement('input', {
            type: 'date',
            id: 'task-due-date',
            className: 'task-date',
            'aria-label': '截止日期'
        });
        dateGroup.appendChild(dateInput);
        formRow.appendChild(dateGroup);

        form.appendChild(formRow);

        // 標籤
        const tagsGroup = domUtils.createElement('div', { className: 'form-group' });
        const tagsInput = domUtils.createElement('input', {
            type: 'text',
            id: 'task-tags',
            className: 'task-input',
            placeholder: '標籤（用逗號分隔）...',
            'aria-label': '任務標籤'
        });
        tagsGroup.appendChild(tagsInput);
        form.appendChild(tagsGroup);

        // 提交按鈕
        const submitBtn = domUtils.createElement('button', {
            type: 'submit',
            className: 'btn btn-primary',
            id: 'add-task-btn'
        });
        submitBtn.innerHTML = '<span class="btn-icon">➕</span>新增任務';
        form.appendChild(submitBtn);

        section.appendChild(form);
        return section;
    }

    /**
     * 創建統計區域
     */
    createStatsSection() {
        const section = domUtils.createElement('section', { className: 'task-stats-section' });

        const statsContainer = domUtils.createElement('div', {
            id: 'task-stats',
            className: 'stats-container'
        });

        const stats = [
            { id: 'stat-total', label: '總計' },
            { id: 'stat-active', label: '進行中' },
            { id: 'stat-completed', label: '已完成' },
            { id: 'stat-overdue', label: '逾期' }
        ];

        stats.forEach(stat => {
            const statItem = domUtils.createElement('div', { className: 'stat-item' });
            const statValue = domUtils.createElement('span', {
                id: stat.id,
                className: 'stat-value'
            });
            statValue.textContent = '0';
            const statLabel = domUtils.createElement('span', { className: 'stat-label' });
            statLabel.textContent = stat.label;

            statItem.appendChild(statValue);
            statItem.appendChild(statLabel);
            statsContainer.appendChild(statItem);
        });

        section.appendChild(statsContainer);
        return section;
    }

    /**
     * 創建控制區域
     */
    createControlsSection() {
        const section = domUtils.createElement('section', { className: 'task-controls-section' });

        const controlsContainer = domUtils.createElement('div', { className: 'controls-container' });

        // 搜索
        const searchContainer = domUtils.createElement('div', { className: 'search-container' });
        const searchInput = domUtils.createElement('input', {
            type: 'text',
            id: 'task-search',
            className: 'search-input',
            placeholder: '搜索任務...',
            'aria-label': '搜索任務'
        });
        searchContainer.appendChild(searchInput);
        controlsContainer.appendChild(searchContainer);

        // 篩選器
        const filterContainer = domUtils.createElement('div', { className: 'filter-container' });
        const filters = [
            { text: '全部', value: 'all', active: true },
            { text: '進行中', value: 'active' },
            { text: '已完成', value: 'completed' }
        ];

        filters.forEach(filter => {
            const button = domUtils.createElement('button', {
                className: `filter-btn ${filter.active ? 'active' : ''}`,
                'data-filter': filter.value
            });
            button.textContent = filter.text;
            filterContainer.appendChild(button);
        });
        controlsContainer.appendChild(filterContainer);

        // 排序
        const sortContainer = domUtils.createElement('div', { className: 'sort-container' });
        const sortSelect = domUtils.createElement('select', {
            id: 'task-sort',
            className: 'sort-select',
            'aria-label': '排序方式'
        });

        const sortOptions = [
            { value: 'createdAt', text: '創建時間' },
            { value: 'updatedAt', text: '更新時間' },
            { value: 'priority', text: '優先級' },
            { value: 'dueDate', text: '截止日期' },
            { value: 'title', text: '標題' }
        ];

        sortOptions.forEach(option => {
            const optionElement = domUtils.createElement('option', { value: option.value });
            optionElement.textContent = option.text;
            sortSelect.appendChild(optionElement);
        });
        sortContainer.appendChild(sortSelect);

        const sortOrderBtn = domUtils.createElement('button', {
            id: 'sort-order-btn',
            className: 'sort-order-btn',
            title: '切換排序順序'
        });
        sortOrderBtn.innerHTML = '<span class="sort-icon">↓</span>';
        sortContainer.appendChild(sortOrderBtn);
        controlsContainer.appendChild(sortContainer);

        // 批量操作
        const batchActions = domUtils.createElement('div', { className: 'batch-actions' });

        const clearBtn = domUtils.createElement('button', {
            id: 'clear-completed-btn',
            className: 'btn btn-secondary'
        });
        clearBtn.textContent = '清除已完成';
        batchActions.appendChild(clearBtn);

        const exportBtn = domUtils.createElement('button', {
            id: 'export-btn',
            className: 'btn btn-secondary'
        });
        exportBtn.textContent = '匯出';
        batchActions.appendChild(exportBtn);

        const importLabel = domUtils.createElement('label', {
            for: 'import-file',
            className: 'btn btn-secondary'
        });
        importLabel.textContent = '匯入';
        batchActions.appendChild(importLabel);

        const importFile = domUtils.createElement('input', {
            type: 'file',
            id: 'import-file',
            accept: '.json',
            style: 'display: none;'
        });
        batchActions.appendChild(importFile);

        controlsContainer.appendChild(batchActions);
        section.appendChild(controlsContainer);
        return section;
    }

    /**
     * 創建列表區域
     */
    createListSection() {
        const section = domUtils.createElement('section', { className: 'task-list-section' });

        const listContainer = domUtils.createElement('div', { className: 'list-container' });

        // 載入指示器
        const loadingIndicator = domUtils.createElement('div', {
            id: 'loading-indicator',
            className: 'loading-indicator',
            style: 'display: none;'
        });
        const spinner = domUtils.createElement('div', { className: 'spinner' });
        const loadingText = domUtils.createElement('span');
        loadingText.textContent = '載入中...';
        loadingIndicator.appendChild(spinner);
        loadingIndicator.appendChild(loadingText);
        listContainer.appendChild(loadingIndicator);

        // 空狀態
        const emptyState = domUtils.createElement('div', {
            id: 'empty-state',
            className: 'empty-state',
            style: 'display: none;'
        });
        const emptyIcon = domUtils.createElement('div', { className: 'empty-icon' });
        emptyIcon.textContent = '📝';
        const emptyTitle = domUtils.createElement('h3');
        emptyTitle.textContent = '尚無任務';
        const emptyText = domUtils.createElement('p');
        emptyText.textContent = '開始新增您的第一個任務吧！';

        emptyState.appendChild(emptyIcon);
        emptyState.appendChild(emptyTitle);
        emptyState.appendChild(emptyText);
        listContainer.appendChild(emptyState);

        // 任務列表
        const taskList = domUtils.createElement('ul', {
            id: 'task-list',
            className: 'task-list',
            role: 'list'
        });
        listContainer.appendChild(taskList);

        section.appendChild(listContainer);
        return section;
    }

    /**
     * 創建通知容器
     */
    createNotificationContainer() {
        return domUtils.createElement('div', {
            id: 'notification-container',
            className: 'notification-container',
            role: 'status',
            'aria-live': 'polite'
        });
    }

    /**
     * 繫結事件
     */
    bindEvents() {
        // 表單提交
        const form = domUtils.query('#task-form', this.container);
        if (form) {
            eventUtils.on(form, 'submit', this.handleTaskCreate);
        }

        // 搜索
        const searchInput = domUtils.query('#task-search', this.container);
        if (searchInput) {
            eventUtils.on(searchInput, 'input', performanceUtils.debounce(this.handleSearch, 300));
        }

        // 篩選器
        const filterButtons = domUtils.queryAll('.filter-btn', this.container);
        filterButtons.forEach(button => {
            eventUtils.on(button, 'click', () => {
                this.handleFilterChange(button.dataset.filter);
            });
        });

        // 排序
        const sortSelect = domUtils.query('#task-sort', this.container);
        if (sortSelect) {
            eventUtils.on(sortSelect, 'change', this.handleSort);
        }

        const sortOrderBtn = domUtils.query('#sort-order-btn', this.container);
        if (sortOrderBtn) {
            eventUtils.on(sortOrderBtn, 'click', () => {
                this.sortOrder = this.sortOrder === 'asc' ? 'desc' : 'asc';
                this.updateSortButton();
                this.renderTaskList();
            });
        }

        // 批量操作
        const clearCompletedBtn = domUtils.query('#clear-completed-btn', this.container);
        if (clearCompletedBtn) {
            eventUtils.on(clearCompletedBtn, 'click', this.handleClearCompleted);
        }

        const exportBtn = domUtils.query('#export-btn', this.container);
        if (exportBtn) {
            eventUtils.on(exportBtn, 'click', this.handleExport);
        }

        const importFile = domUtils.query('#import-file', this.container);
        if (importFile) {
            eventUtils.on(importFile, 'change', this.handleImport);
        }

        // 任務列表事件委託
        const taskList = domUtils.query('#todo-list', this.container);
        if (taskList) {
            eventUtils.delegate(taskList, '.task-checkbox', 'click', (event) => {
                const taskId = event.target.closest('.task-item').dataset.id;
                this.handleTaskToggle(taskId);
            });

            eventUtils.delegate(taskList, '.task-edit-btn', 'click', (event) => {
                const taskId = event.target.closest('.task-item').dataset.id;
                this.handleStartEdit(taskId);
            });

            eventUtils.delegate(taskList, '.task-delete-btn', 'click', (event) => {
                const taskId = event.target.closest('.task-item').dataset.id;
                this.handleTaskDelete(taskId);
            });

            eventUtils.delegate(taskList, '.task-save-btn', 'click', (event) => {
                const taskId = event.target.closest('.task-item').dataset.id;
                this.handleSaveEdit(taskId);
            });

            eventUtils.delegate(taskList, '.task-cancel-btn', 'click', (event) => {
                this.handleCancelEdit();
            });
        }

        // 鍵盤快捷鍵
        eventUtils.on(document, 'keydown', (event) => {
            this.handleKeyboardShortcut(event);
        });
    }

    /**
     * 繫結服務事件
     */
    bindServiceEvents() {
        taskService.on(EVENT_TYPES.TODO_ADDED, (task) => {
            this.showNotification(SUCCESS_MESSAGES.TODO_ADDED, 'success');
            this.loadTasks();
        });

        taskService.on(EVENT_TYPES.TODO_UPDATED, (task) => {
            this.showNotification(SUCCESS_MESSAGES.TODO_UPDATED, 'success');
            this.loadTasks();
        });

        taskService.on(EVENT_TYPES.TODO_DELETED, (data) => {
            this.showNotification(SUCCESS_MESSAGES.TODO_DELETED, 'success');
            this.loadTasks();
        });

        taskService.on(EVENT_TYPES.TODO_COMPLETED, (task) => {
            this.showNotification('任務已完成！', 'success');
            this.loadTasks();
        });

        taskService.on(EVENT_TYPES.SERVICE_ERROR, (data) => {
            this.showNotification(data.error.message || ERROR_MESSAGES.GENERIC, 'error');
        });
    }

    /**
     * 載入任務
     */
    async loadTasks() {
        try {
            this.setLoading(true);

            const filters = this.getFilters();
            this.tasks = await taskService.getAllTasks(filters);

            // 應用搜索和排序
            let filteredTasks = this.tasks;
            if (this.searchTerm) {
                filteredTasks = await taskService.searchTasks(this.searchTerm, filters);
            }

            filteredTasks = this.sortTasks(filteredTasks);

            this.renderTaskList(filteredTasks);
            this.updateStats();

        } catch (error) {
            console.error('載入任務失敗:', error);
            this.showError('載入失敗', error.message);
        } finally {
            this.setLoading(false);
        }
    }

    /**
     * 取得篩選條件
     */
    getFilters() {
        const filters = {};

        switch (this.currentFilter) {
            case 'active':
                filters.completed = false;
                break;
            case 'completed':
                filters.completed = true;
                break;
        }

        return filters;
    }

    /**
     * 排序任務
     */
    sortTasks(tasks) {
        return [...tasks].sort((a, b) => {
            let comparison = 0;

            switch (this.sortBy) {
                case 'priority':
                    comparison = b.getPriorityValue() - a.getPriorityValue();
                    break;
                case 'title':
                    comparison = a.title.localeCompare(b.title);
                    break;
                case 'dueDate':
                    if (!a.dueDate && !b.dueDate) comparison = 0;
                    else if (!a.dueDate) comparison = 1;
                    else if (!b.dueDate) comparison = -1;
                    else comparison = a.dueDate - b.dueDate;
                    break;
                case 'updatedAt':
                    comparison = b.updatedAt - a.updatedAt;
                    break;
                case 'createdAt':
                default:
                    comparison = b.createdAt - a.createdAt;
                    break;
            }

            return this.sortOrder === 'asc' ? comparison : -comparison;
        });
    }

    /**
     * 渲染任務列表
     */
    renderTaskList(tasks = this.tasks) {
        const taskList = domUtils.query('#todo-list', this.container);
        const emptyState = domUtils.query('#empty-state', this.container);

        if (!taskList) return;

        // 清空列表
        while (taskList.firstChild) {
            taskList.removeChild(taskList.firstChild);
        }

        if (tasks.length === 0) {
            if (emptyState) {
                emptyState.style.display = 'block';
            }
            return;
        }

        if (emptyState) {
            emptyState.style.display = 'none';
        }

        tasks.forEach(task => {
            const taskElement = this.createTaskElement(task);
            taskList.appendChild(taskElement);
        });
    }

    /**
     * 創建任務元素
     */
    createTaskElement(task) {
        const isEditing = this.editingTaskId === task.id;
        const li = domUtils.createElement('li', {
            className: `task-item ${task.completed ? 'completed' : ''} ${isEditing ? 'editing' : ''} priority-${task.priority}`,
            'data-id': task.id,
            'data-completed': task.completed,
        });

        if (isEditing) {
            this.appendEditForm(li, task);
        } else {
            this.appendTaskContent(li, task);
        }

        return li;
    }

    /**
     * 附加任務內容
     */
    appendTaskContent(element, task) {
        // 核取方塊
        const checkbox = domUtils.createElement('div', {
            className: `task-checkbox ${task.completed ? 'checked' : ''}`,
            role: 'button',
            tabIndex: '0',
            'aria-label': task.completed ? '標記為未完成' : '標記為已完成',
            'aria-checked': task.completed,
        });
        element.appendChild(checkbox);

        // 內容區域
        const content = domUtils.createElement('div', { className: 'task-content' });

        // 標題
        const title = domUtils.createElement('h3', { className: 'task-title' });
        title.textContent = task.title;
        content.appendChild(title);

        // 描述
        if (task.description) {
            const description = domUtils.createElement('p', { className: 'task-description' });
            description.textContent = task.description;
            content.appendChild(description);
        }

        // 元資料
        const meta = domUtils.createElement('div', { className: 'task-meta' });

        // 創建時間
        const createdDate = domUtils.createElement('span', { className: 'task-date' });
        createdDate.textContent = dateUtils.getRelativeTime(task.createdAt);
        meta.appendChild(createdDate);

        // 截止日期
        if (task.dueDate) {
            const dueDate = domUtils.createElement('span', {
                className: `task-due-date ${task.isOverdue() ? 'overdue' : ''}`
            });
            dueDate.textContent = `截止: ${dateUtils.formatDate(task.dueDate)}`;
            meta.appendChild(dueDate);
        }

        // 優先級
        const priority = domUtils.createElement('span', {
            className: `task-priority priority-${task.priority}`
        });
        priority.textContent = this.getPriorityLabel(task.priority);
        meta.appendChild(priority);

        // 標籤
        if (task.tags && task.tags.length > 0) {
            const tags = domUtils.createElement('div', { className: 'task-tags' });
            task.tags.forEach(tag => {
                const tagElement = domUtils.createElement('span', {
                    className: 'task-tag',
                    'data-tag': tag
                });
                tagElement.textContent = tag;
                tags.appendChild(tagElement);
            });
            meta.appendChild(tags);
        }

        content.appendChild(meta);
        element.appendChild(content);

        // 操作按鈕
        const actions = domUtils.createElement('div', { className: 'task-actions' });

        const editBtn = domUtils.createElement('button', {
            className: 'task-action-btn task-edit-btn',
            'aria-label': '編輯任務',
            title: '編輯',
        });
        editBtn.textContent = '✏️';
        actions.appendChild(editBtn);

        const deleteBtn = domUtils.createElement('button', {
            className: 'task-action-btn task-delete-btn',
            'aria-label': '刪除任務',
            title: '刪除',
        });
        deleteBtn.textContent = '🗑️';
        actions.appendChild(deleteBtn);

        element.appendChild(actions);
    }

    /**
     * 附加編輯表單
     */
    appendEditForm(element, task) {
        const form = domUtils.createElement('div', { className: 'task-edit-form' });

        // 標題輸入
        const titleInput = domUtils.createElement('input', {
            type: 'text',
            className: 'task-edit-input',
            value: task.title,
            placeholder: '任務標題...',
            'aria-label': '編輯任務標題',
            required: '',
            maxLength: '200',
        });
        form.appendChild(titleInput);

        // 描述輸入
        const descriptionInput = domUtils.createElement('textarea', {
            className: 'task-edit-textarea',
            placeholder: '任務描述...',
            'aria-label': '編輯任務描述',
            rows: '3',
        });
        descriptionInput.value = task.description || '';
        form.appendChild(descriptionInput);

        // 表格行
        const formRow = domUtils.createElement('div', { className: 'form-row' });

        // 優先級選擇
        const prioritySelect = domUtils.createElement('select', {
            className: 'task-edit-select',
            'aria-label': '選擇優先級',
        });
        ['low', 'medium', 'high'].forEach(priority => {
            const option = domUtils.createElement('option', { value: priority });
            option.textContent = this.getPriorityLabel(priority);
            if (task.priority === priority) {
                option.selected = '';
            }
            prioritySelect.appendChild(option);
        });
        formRow.appendChild(prioritySelect);

        // 截止日期
        const dueDateInput = domUtils.createElement('input', {
            type: 'date',
            className: 'task-edit-date',
            'aria-label': '截止日期',
        });
        if (task.dueDate) {
            dueDateInput.value = dateUtils.formatDate(task.dueDate, 'YYYY-MM-DD');
        }
        formRow.appendChild(dueDateInput);

        // 標籤輸入
        const tagsInput = domUtils.createElement('input', {
            type: 'text',
            className: 'task-edit-input',
            value: task.tags ? task.tags.join(', ') : '',
            placeholder: '標籤（用逗號分隔）...',
            'aria-label': '編輯任務標籤',
        });
        formRow.appendChild(tagsInput);

        form.appendChild(formRow);

        // 操作按鈕
        const actions = domUtils.createElement('div', { className: 'task-edit-actions' });

        const saveBtn = domUtils.createElement('button', {
            className: 'btn btn-primary task-save-btn',
            'aria-label': '儲存編輯',
        });
        saveBtn.textContent = '儲存';
        actions.appendChild(saveBtn);

        const cancelBtn = domUtils.createElement('button', {
            className: 'btn btn-secondary task-cancel-btn',
            'aria-label': '取消編輯',
        });
        cancelBtn.textContent = '取消';
        actions.appendChild(cancelBtn);

        form.appendChild(actions);
        element.appendChild(form);
    }

    /**
     * 處理任務創建
     */
    async handleTaskCreate(event) {
        event.preventDefault();

        try {
            const formData = this.getFormData();

            // 驗證資料
            const validation = taskService.validateTaskData(formData);
            if (!validation.isValid) {
                this.showNotification(validation.errors.join(', '), 'error');
                return;
            }

            // 創建任務
            await taskService.createTask(validation.cleanedData);

            // 清空表單
            this.clearForm();

            // 聚焦到標題輸入框
            const titleInput = domUtils.query('#task-title', this.container);
            if (titleInput) {
                titleInput.focus();
            }

        } catch (error) {
            console.error('創建任務失敗:', error);
            this.showNotification(error.message, 'error');
        }
    }

    /**
     * 處理任務切換
     */
    async handleTaskToggle(taskId) {
        try {
            await taskService.toggleTaskComplete(taskId);
        } catch (error) {
            console.error('切換任務狀態失敗:', error);
            this.showNotification(error.message, 'error');
        }
    }

    /**
     * 處理任務刪除
     */
    async handleTaskDelete(taskId) {
        try {
            const task = this.tasks.find(t => t.id === taskId);
            if (!task) return;

            if (!confirm(`確定要刪除任務「${task.title}」嗎？`)) {
                return;
            }

            await taskService.deleteTask(taskId);
        } catch (error) {
            console.error('刪除任務失敗:', error);
            this.showNotification(error.message, 'error');
        }
    }

    /**
     * 處理開始編輯
     */
    handleStartEdit(taskId) {
        // 如果已在編輯其他任務，先取消
        if (this.editingTaskId && this.editingTaskId !== taskId) {
            this.handleCancelEdit();
        }

        this.editingTaskId = taskId;
        this.renderTaskList();

        // 聚焦到編輯表單
        setTimeout(() => {
            const editInput = domUtils.query(`.task-item[data-id="${taskId}"] .task-edit-input`);
            if (editInput) {
                editInput.focus();
                editInput.select();
            }
        }, 0);
    }

    /**
     * 處理儲存編輯
     */
    async handleSaveEdit(taskId) {
        try {
            const taskElement = domUtils.query(`.task-item[data-id="${taskId}"]`);
            if (!taskElement) return;

            const formData = this.getEditFormData(taskElement);

            // 驗證資料
            const validation = taskService.validateTaskData(formData, true);
            if (!validation.isValid) {
                this.showNotification(validation.errors.join(', '), 'error');
                return;
            }

            // 更新任務
            await taskService.updateTask(taskId, validation.cleanedData);

            this.editingTaskId = null;
            this.renderTaskList();

        } catch (error) {
            console.error('儲存編輯失敗:', error);
            this.showNotification(error.message, 'error');
        }
    }

    /**
     * 處理取消編輯
     */
    handleCancelEdit() {
        this.editingTaskId = null;
        this.renderTaskList();
    }

    /**
     * 處理篩選變更
     */
    handleFilterChange(filter) {
        this.currentFilter = filter;

        // 更新按鈕狀態
        const filterButtons = domUtils.queryAll('.filter-btn', this.container);
        filterButtons.forEach(button => {
            const isActive = button.dataset.filter === filter;
            button.classList.toggle('active', isActive);
            button.setAttribute('aria-selected', isActive);
        });

        this.loadTasks();
    }

    /**
     * 處理搜索
     */
    handleSearch(event) {
        this.searchTerm = event.target.value.trim();
        this.loadTasks();
    }

    /**
     * 處理排序
     */
    handleSort(event) {
        this.sortBy = event.target.value;
        this.loadTasks();
    }

    /**
     * 處理清除已完成任務
     */
    async handleClearCompleted() {
        try {
            const completedCount = this.tasks.filter(task => task.completed).length;

            if (completedCount === 0) {
                this.showNotification('沒有已完成的任務', 'info');
                return;
            }

            if (!confirm(`確定要清除 ${completedCount} 個已完成的任務嗎？`)) {
                return;
            }

            const deletedCount = await taskService.deleteCompletedTasks();
            this.showNotification(`已清除 ${deletedCount} 個已完成的任務`, 'success');
        } catch (error) {
            console.error('清除已完成任務失敗:', error);
            this.showNotification(error.message, 'error');
        }
    }

    /**
     * 處理匯出
     */
    async handleExport() {
        try {
            const exportData = await taskService.exportTasks();
            const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                type: 'application/json'
            });

            const url = URL.createObjectURL(blob);
            const a = domUtils.createElement('a', {
                href: url,
                download: `tasks_${new Date().toISOString().split('T')[0]}.json`,
            });
            a.click();
            URL.revokeObjectURL(url);

            this.showNotification('任務已匯出', 'success');
        } catch (error) {
            console.error('匯出失敗:', error);
            this.showNotification(error.message, 'error');
        }
    }

    /**
     * 處理匯入
     */
    async handleImport(event) {
        try {
            const file = event.target.files[0];
            if (!file) return;

            const text = await file.text();
            const importData = JSON.parse(text);

            const result = await taskService.importTasks(importData);

            if (result.success) {
                this.showNotification(
                    `成功匯入 ${result.imported} 個任務${result.invalid > 0 ? `，${result.invalid} 個失敗` : ''}`,
                    'success'
                );
                this.loadTasks();
            } else {
                this.showNotification('匯入失敗', 'error');
            }

            // 清空檔案輸入
            event.target.value = '';
        } catch (error) {
            console.error('匯入失敗:', error);
            this.showNotification('匯入失敗：檔案格式錯誤', 'error');
            event.target.value = '';
        }
    }

    /**
     * 處理鍵盤快捷鍵
     */
    handleKeyboardShortcut(event) {
        // 如果正在輸入，不處理快捷鍵
        if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
            return;
        }

        const key = event.key.toLowerCase();
        const ctrl = event.ctrlKey || event.metaKey;

        if (ctrl && key === 'n') {
            event.preventDefault();
            const titleInput = domUtils.query('#task-title', this.container);
            if (titleInput) {
                titleInput.focus();
            }
        }
    }

    /**
     * 取得表單資料
     */
    getFormData() {
        const titleInput = domUtils.query('#task-title', this.container);
        const descriptionInput = domUtils.query('#task-description', this.container);
        const prioritySelect = domUtils.query('#task-priority', this.container);
        const dueDateInput = domUtils.query('#task-due-date', this.container);
        const tagsInput = domUtils.query('#task-tags', this.container);

        const tags = tagsInput?.value
            .split(',')
            .map(tag => tag.trim().toLowerCase())
            .filter(tag => tag.length > 0) || [];

        return {
            title: titleInput?.value?.trim() || '',
            description: descriptionInput?.value?.trim() || '',
            priority: prioritySelect?.value || 'medium',
            dueDate: dueDateInput?.value ? new Date(dueDateInput.value) : null,
            tags,
        };
    }

    /**
     * 取得編輯表單資料
     */
    getEditFormData(taskElement) {
        const titleInput = domUtils.query('.task-edit-input', taskElement);
        const descriptionInput = domUtils.query('.task-edit-textarea', taskElement);
        const prioritySelect = domUtils.query('.task-edit-select', taskElement);
        const dueDateInput = domUtils.query('.task-edit-date', taskElement);
        const tagsInput = domUtils.query('.form-row .task-edit-input', taskElement);

        const tags = tagsInput?.value
            .split(',')
            .map(tag => tag.trim().toLowerCase())
            .filter(tag => tag.length > 0) || [];

        return {
            title: titleInput?.value?.trim() || '',
            description: descriptionInput?.value?.trim() || '',
            priority: prioritySelect?.value || 'medium',
            dueDate: dueDateInput?.value ? new Date(dueDateInput.value) : null,
            tags,
        };
    }

    /**
     * 清空表單
     */
    clearForm() {
        const form = domUtils.query('#task-form', this.container);
        if (form) {
            form.reset();
        }
    }

    /**
     * 更新統計資訊
     */
    async updateStats() {
        try {
            const stats = await taskService.getTaskStats();

            const elements = {
                total: domUtils.query('#stat-total', this.container),
                active: domUtils.query('#stat-active', this.container),
                completed: domUtils.query('#stat-completed', this.container),
                overdue: domUtils.query('#stat-overdue', this.container),
            };

            if (elements.total) elements.total.textContent = stats.total;
            if (elements.active) elements.active.textContent = stats.active;
            if (elements.completed) elements.completed.textContent = stats.completed;
            if (elements.overdue) elements.overdue.textContent = stats.overdue;

        } catch (error) {
            console.error('更新統計失敗:', error);
        }
    }

    /**
     * 更新排序按鈕
     */
    updateSortButton() {
        const sortOrderBtn = domUtils.query('#sort-order-btn', this.container);
        if (sortOrderBtn) {
            const icon = domUtils.query('.sort-icon', sortOrderBtn);
            if (icon) {
                icon.textContent = this.sortOrder === 'asc' ? '↑' : '↓';
            }
        }
    }

    /**
     * 設定載入狀態
     */
    setLoading(isLoading) {
        this.isLoading = isLoading;
        const loadingIndicator = domUtils.query('#loading-indicator', this.container);
        if (loadingIndicator) {
            loadingIndicator.style.display = isLoading ? 'flex' : 'none';
        }
    }

    /**
     * 取得優先級標籤
     */
    getPriorityLabel(priority) {
        const labels = {
            low: '低',
            medium: '中',
            high: '高',
        };
        return labels[priority] || priority;
    }

    /**
     * 顯示通知
     */
    showNotification(message, type = 'info') {
        const container = domUtils.query('#notification-container', this.container);
        if (!container) return;

        const notification = domUtils.createElement('div', {
            className: `notification ${type}`,
            role: 'alert',
            'aria-live': 'polite',
        });

        const icon = this.getNotificationIcon(type);
        notification.appendChild(icon);

        const text = domUtils.createElement('span', { className: 'notification-text' });
        text.textContent = message;
        notification.appendChild(text);

        const closeBtn = domUtils.createElement('button', {
            className: 'notification-close',
            'aria-label': '關閉通知',
        });
        closeBtn.textContent = '×';
        closeBtn.addEventListener('click', () => {
            notification.remove();
        });
        notification.appendChild(closeBtn);

        container.appendChild(notification);

        // 自動移除
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, APP_CONFIG.ui.notifications.duration || 5000);

        // 限制通知數量
        this.limitNotifications();
    }

    /**
     * 取得通知圖示
     */
    getNotificationIcon(type) {
        const icons = {
            success: '✅',
            error: '❌',
            warning: '⚠️',
            info: 'ℹ️',
        };
        const icon = domUtils.createElement('span', { className: 'notification-icon' });
        icon.textContent = icons[type] || 'ℹ️';
        return icon;
    }

    /**
     * 限制通知數量
     */
    limitNotifications() {
        const container = domUtils.query('#notification-container', this.container);
        if (!container) return;

        const maxCount = APP_CONFIG.ui.notifications.maxCount || 5;
        const notifications = container.children;

        while (notifications.length > maxCount) {
            notifications[0].remove();
        }
    }

    /**
     * 顯示錯誤
     */
    showError(title, message) {
        this.showNotification(`${title}: ${message}`, 'error');
    }

    /**
     * 銷毀任務管理器
     */
    dispose() {
        this.editingTaskId = null;
        this.tasks = [];

        if (taskService.dispose) {
            taskService.dispose();
        }

        console.log('TaskManager 已銷毀');
    }
}

export default TaskManager;